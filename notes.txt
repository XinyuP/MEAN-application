Angular is a framework which allows you
to create reactive single page applications.

MAEN Stack

client 
Angular(JS) 
-- presentation/UI
-- Single-Page Application
This single page application can be rendered by our Node Backend.
So we could have one route, which essentially returns this single HTML page,
but it can also be totally decoupled from that and be served from a totally different host,
some static hosst like AWS S3, for example.



server 
Node 
Express
MongoDB -- persistent data storage
-- business logic especially the logic that should not be exposed to the client due to security reasons
-- authentication logic


connect two pieces:
we we exchange requests and responses
and these requests and responses are sent behind the scenes, so-called AJAX requests.
They afford the type of data we exchange is not HTML, because we never want HTML code.
We do all that presentation and re-rendering logic with Angular.
Instead, what we get is so-called JSON data.



/////////// AngularJS ///////////////
AngularJS is a JavaScript-based front-end web framework 
based on bidirectional UI data binding and is used to design Single Page Applications.
They load faster and offer a great user experience.
These applications only load a single HTML page, and only part of the page gets updated with every click of the mouse.

This is different from multi-page applications as they load a new page with every click.


In a Single Page Application (SPA), all of your application's functions exist
in a single HTML page. As users access your application's features, the browser
needs to render only the parts that matter to the user, instead of loading a new page. 
This pattern can significantly improve your application's user experience.

update UI
handle user input
communicate with backend 
no need to reload the page 




//////////// node ///////////////////
node.js for backend:
listen to request and send response
execute server-side logic -- auth, db, file

node,js is an alternative to PHP, Ruby on Rails, Java 
-- rarely used standalone, typically use a framework along
with it and that framework you typically use is express.




////////////// Express /////////////////
Express is a node JS framework,
it still uses node js, the same language.
but it adds a lot of utility features,
it offers additional functionalities or in general

Express JS is middleware-based
It basically funnels incoming requests through a chain
of middlewares of steps where we can do something
with the request, read some data from it, manipulate it
check if the user is authenticated or basically sent back a response immediately.
 
it includes routing which means we could render views(HTML pages) with it.

we can handle different requests to different endpoint
which will be important for connecting Angular
to the backend because if we wanna fetch a list of posts
we wanna send some requests to "/posts".
So our domain/posts, if we want to create a new post
we want to send a different request to our "domain/post",
express JS allows us to implement this routing logic
so that different requests to different URLs are handled correctly.



//////////// MongoDB //////////////
noSQL database
it stores so-called documents in so-called collections.

enforces no schema

you can have different documents with different pieces of information
in the same table or collection as it is called here.

And it also doesn't really work with relations.

we can't relate different documents with each other
but in general, it way less strict and flexible regarding than SQL db 


noSQL --> store multiple unstructured documents
though you can get some structure into it


easy connect to node 
but don't connect to angular 




//////////////////////////
single page application


immediately change the page
instant re-rendering 
instant user feedback
highly engaging UI 






----------------------------------------------
angular thinks in component
Essentially, you compose an entire page of these components.
You build it with these components,
because the advantage of this is that:
    you have small, easily to maintain,
    and manage building blocks for your ui,
    which you can even reuse,

because some components appear more than once on a page.




-------------------------------------------------
event binding is an Angular feature

which allows us to listen to event in a declarative way 
--> instead of using javascript, 
in html (click)
-------------------------------------------------
string interpolation
{{}}

inside we refer to something which is stored inside of the component belonging to the template
it can be a method
it also can be a property name


-------------------------------------------------

HTML elements in the dominant JS are just JavaScript Objects with
a couple of properties, so variables belonging to the Objects
which we can read and write



-------------------------------------------------

<textarea rows="6" [value]="newPost" #postInput></textarea>

One-way and two-way data binding are two of the important ways by which we can exchange data 
from component to DOM and vice-versa. Data exchange between the component and the view will help
 us to build dynamic and interactive web applications.
-------------------------------------------------
 ** two way binding feature **


Two-way binding gives components in your application a way to share data. 
Use two-way binding to listen for events and update values simultaneously
 between parent and child components.

Angular's two-way binding syntax is a combination of square brackets and parentheses, [()]. 
The [()] syntax combines the brackets of property binding, [],
 with the parentheses of event binding, ()


<textarea rows="6" [(ngModel)]></textarea>
directive 
listen to the user input and store that data in the textarea



-------------------------------------------------

 *** structural directives ***
 Structural directives are directives which change the DOM layout by adding and removing DOM elements.

Angular provides a set of built-in structural directives (such as NgIf, NgForOf, NgSwitch and others)
which are commonly used in all Angular projects. 

 
It's a quite common use-case to repeat a block of HTML but only when a particular condition is true. 
An intuitive way to do that is to put both an *ngFor and an *ngIf on the same element. 
However, since both *ngFor and *ngIf are structural directives




-------------------------------------------------

<form (submit)="onAddPost()" #postForm="ngForm">

#postForm="ngForm" 
give us access to the form object that angular created for us



-------------------------------------------------

A service is a class which you
add to your Angular application, which you let inject
by Angular into components.

I'll come back to what inject means

and which is able to centralize some tasks and provide
easy access to data from within different components
without property and event binding, 



-------------------------------------------------

dependency injection


-------------------------------------------------

event driven approach



-------------------------------------------------

Observables:

Observable
   |
   | subscribe
Observer
    next()
    error()
    complete()

Observables are functions that throw values. Objects called observers subscribe to these values. 
Observables create a pub-sub system based on the observable design pattern. 
This makes observables popular with async programming in modern JavaScript frameworks like Angular 
and libraries like React.

Unlike Promises, observables are not yet inherent to JavaScript. 
This is why Angular and React rely on the RxJS library for implementing observables. 
RxJs stands for "Reactive Extension for JavaScript". 
The RxJS library defines its own Observable class along with supporting methods for Reactive programming.

What are Observables?
Observables represent a progressive way of handling events, async activity, and multiple values in JavaScript. 
Observables are really just functions that throw values. Objects called observers define callback functions for next(), error(), and complete(). These observer objects are then passed as arguments to the observable function. The observable function calls the observer methods based on a certain behavior (AJAX HTTP request, event, etc). This allows the observer to "listen" for state changes emitted by the observable function.

Why Observables?
Observables have surfaced through an evolution of handling async activity in JavaScript. 
While the Promise API has largely replaced the world of nested callbacks, 
observables demonstrate the next step forward in gracefully handling async activity and real-time events. 



-------------------------------------------------




-------------------------------------------------



-------------------------------------------------



-------------------------------------------------



-------------------------------------------------




-------------------------------------------------



-------------------------------------------------




-------------------------------------------------



-------------------------------------------------



-------------------------------------------------



-------------------------------------------------




-------------------------------------------------



-------------------------------------------------




-------------------------------------------------


































